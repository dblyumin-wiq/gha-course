# This action will run a separate job for each changed file in the `config_data_files` directory,
# it will not run any jobs for files that did not change.
name: Run Action on Changed Env Only
on:
  push:
    branches: 
      - main
    paths:
      - 'config_data_files/**.yml'

jobs:
  define-matrix:
    # Dynamically generate the matrix for the downstream job, based on the changed files
    runs-on: ubuntu-latest

    outputs:
      envs: ${{ steps.set-matrix.outputs.envs }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get changed files
        # Use custom Marketplace action to get the list of changed files
        # Use the following options ('with' clause):
        # - Only consider changes since the last remote commit
        # - Only monitor YAML files in the `config_data_files` directory
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          since_last_remote_commit: true
          files: |
            'config_data_files/**.yml'

      - name: Set matrix array
        # Generate a JSON array of the filenames without the dir path and extension
        # Save it to an output variable, and print to the console
        id: set-matrix
        env:
          ALL_MODIFIED_FILES: ${{ steps.changed-files.outputs.modified_files }}
        run: |
          filenames=()
          for file in ${ALL_MODIFIED_FILES}; do
            filename=$(basename "$file")
            filename_without_ext="${filename%.*}"
            filenames+=("$filename_without_ext")
          done
          filenames_json=$(echo "${filenames[@]}" | jq -Rc 'split(" ")')
          echo "envs=$filenames_json" >> $GITHUB_OUTPUT
          echo $filenames_json

  deploy-to-env:
    # Simulate a deployment to different environments based on the changed files
    runs-on: ubuntu-latest
    needs: define-matrix
    continue-on-error: true
    # Skip this job if no files were changed
    if: ${{ needs.define-matrix.outputs.envs != '[]' }}
    strategy:
      matrix:
        # Dynamically generate the matrix based on the output from the previous job
        env_label: ${{ fromJson(needs.define-matrix.outputs.envs) }}

    env:
      # generate required variables based on the env label
      PROJECT_ID: 'foo-bar-${{ matrix.env_label }}'
      # if-block to look up value, default to '000'
      PROJECT_NUMBER: > 
        ${{ 
          matrix.env_label == 'dev' && '123' || 
          matrix.env_label == 'test' && '456' || 
          '000' 
        }}
    
    steps:

      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Print generated variables
        run: |
          echo "Data file: '${{ github.workspace }}/config_data_files/${{ matrix.env_label }}.yml"
          echo "Project ID: ${{ env.PROJECT_ID }}"
          echo "Project Number: ${{ env.PROJECT_NUMBER }}"
